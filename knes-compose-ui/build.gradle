plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
    id 'org.jetbrains.compose' version '1.4.3'
}

repositories {
    mavenCentral()
    google()
    maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    maven { url "https://packages.jetbrains.team/maven/p/skija/maven" }
}

dependencies {
    implementation project(':vnes-emulator')
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // Compose Desktop dependencies
    implementation compose.desktop.currentOs
    implementation compose.material
    implementation compose.ui
    implementation compose.foundation
    implementation compose.runtime

    // Skiko dependency for hardware-accelerated rendering
    implementation "org.jetbrains.skiko:skiko:0.7.90"

    // Add platform-specific Skiko dependencies to ensure native libraries are included
    implementation "org.jetbrains.skiko:skiko-awt-runtime-macos-x64:0.7.90"
    implementation "org.jetbrains.skiko:skiko-awt-runtime-macos-arm64:0.7.90"

    testImplementation 'junit:junit:4.13.2'
}

kotlin {
    jvmToolchain(8)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.8'
        languageVersion = '1.8'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    main {
        kotlin {
            srcDirs = ['src/main/kotlin']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

application {
    mainClass = 'knes.compose.ComposeMainKt'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'knes.compose.ComposeMainKt',
            'Application-Name': 'vNES Compose'
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { file -> 
            file.isDirectory() ? file : zipTree(file) 
        }
    }
}
